{"version":3,"sources":["words.js","App.js","serviceWorker.js","index.js"],"names":["sightWords","App","useState","words","setWords","currentWord","setCurrentWord","typedWord","setTypedWord","modalOpen","setModalOpen","failedValidation","setFailedValidation","name","setName","nameValidated","setNameValidated","score","setScore","instructionsModal","setInstructionsModal","useEffect","window","mixpanel","track","_getWord","length","setTimeout","_closeModal","index","Math","floor","random","filter","word","_closeInstructions","className","toUpperCase","type","value","onChange","e","target","placeholder","autoComplete","disabled","onClick","preventDefault","toLowerCase","maxLength","width","height","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9145cb2e.chunk.js","sourcesContent":["export const sightWords = [\n  \"i\",\n  \"can\",\n  \"see\",\n  \"the\",\n  \"a\",\n  \"at\",\n  \"and\",\n  \"like\",\n  \"me\",\n  \"we\",\n  \"be\",\n  \"he\",\n  \"she\",\n  \"to\"\n];\n","import React, { useState, useEffect } from \"react\";\nimport Confetti from \"react-confetti\";\nimport { sightWords } from \"./words\";\nimport \"./reset.scss\";\nimport \"./App.scss\";\n\nconst App = () => {\n  const [words, setWords] = useState(sightWords);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const [typedWord, setTypedWord] = useState(\"\");\n  const [modalOpen, setModalOpen] = useState(false);\n  const [failedValidation, setFailedValidation] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [nameValidated, setNameValidated] = useState(false);\n  const [score, setScore] = useState(0);\n  const [instructionsModal, setInstructionsModal] = useState(false);\n\n  useEffect(() => {\n    window.mixpanel.track(\"site visit\");\n    _getWord();\n  }, []);\n\n  useEffect(() => {\n    if (words.length === 0) {\n      window.mixpanel.track(\"cycled words: \" + name);\n      setWords(sightWords);\n    }\n  }, [words]);\n\n  useEffect(() => {\n    if (name) {\n      setModalOpen(true);\n      setTimeout(_closeModal, 4000);\n    }\n  }, [score]);\n\n  const _getWord = () => {\n    let index = Math.floor(Math.random() * words.length);\n    setCurrentWord(words[index]);\n    setWords(words.filter(word => word !== words[index]));\n  };\n\n  const _checkWord = e => {\n    e.preventDefault();\n    if (!typedWord) {\n      return false;\n    }\n    if (currentWord === typedWord.toLowerCase()) {\n      setScore(score + 1);\n      setTypedWord(\"\");\n      setTimeout(_getWord, 0);\n    } else {\n      setFailedValidation(true);\n      setTimeout(_closeModal, 4000);\n      setTypedWord(\"\");\n    }\n  };\n\n  const _closeModal = () => {\n    setModalOpen(false);\n    setFailedValidation(false);\n  };\n\n  const _openInstructions = () => {\n    setInstructionsModal(true);\n  };\n\n  const _closeInstructions = () => {\n    setInstructionsModal(false);\n  };\n\n  const _checkName = e => {\n    e.preventDefault();\n    if (!name) {\n      return false;\n    } else {\n      setNameValidated(true);\n      window.mixpanel.track(`logged name: ${name}`);\n    }\n  };\n\n  return (\n    <div className='App'>\n      <div className='app-container'>\n        {nameValidated ? (\n          <>\n            <p className='prompt'>{`${name}, your word is:`}</p>\n            <h3 className={failedValidation ? \"red\" : \"\"}>\n              {currentWord === \"i\" ? currentWord.toUpperCase() : currentWord}\n            </h3>\n            <form>\n              <input\n                type='text'\n                value={typedWord}\n                onChange={e => setTypedWord(e.target.value)}\n                placeholder='type your word here...'\n                autoComplete='new-word'\n                disabled={modalOpen || failedValidation}\n              />\n\n              <button className='check-word' onClick={_checkWord}>\n                Check my word\n              </button>\n            </form>\n          </>\n        ) : (\n          <>\n            <p className='get-started'>Let's get started!</p>\n            <p className='instructions'>\n              Parents:{\" \"}\n              <span className='instruction-link' onClick={_openInstructions}>\n                Click here\n              </span>{\" \"}\n              for instructions\n            </p>\n            <p className='name-prompt'>What's your name?</p>\n            <form>\n              <input\n                type='text'\n                value={name}\n                onChange={e => setName(e.target.value)}\n                placeholder='type your name here...'\n                autoComplete='new-name'\n                maxLength='15'\n              />\n              <button className='submit-name' onClick={_checkName}>\n                Start\n              </button>\n            </form>\n          </>\n        )}\n      </div>\n      {modalOpen &&\n        (score % sightWords.length === 0 ? (\n          <>\n            <div className='grey-out' />\n            <div className='congrats'>\n              <Confetti width={400} height={400} />\n              <i className='fas fa-dharmachakra doubloon' />\n            </div>\n          </>\n        ) : (\n          <>\n            <div className='grey-out' />\n            <div className='congrats'>\n              <Confetti width={400} height={400} />\n              <i className='fas fa-check-circle good' />\n            </div>\n          </>\n        ))}\n      {failedValidation && (\n        <>\n          <div className='grey-out' />\n          <div className='congrats'>\n            <i className='fas fa-times-circle bad' />\n          </div>\n        </>\n      )}\n      {instructionsModal && (\n        <>\n          <div className='grey-out' onClick={_closeInstructions} />\n          <div className='instructions-modal'>\n            <i className='fas fa-times' onClick={_closeInstructions} />\n            <p className='instructions-title'>Instructions</p>\n            <ul>\n              <li>Have your child type his/her name for a customized prompt</li>\n              <li>A sight word will display once the game begins</li>\n              <li>Have your child say the word before they begin typing</li>\n              <li>\n                Once your child has read the word, have them type it in and\n                focus on each letter\n              </li>\n              <li>\n                After clicking 'Check my word', they'll get feedback on whether\n                it was typed correctly or not (it is not case sensitive)\n              </li>\n              <li>\n                Once all the sight words have been completed, they'll get a gold\n                doubloon and the words will start over\n              </li>\n            </ul>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}